{
  "hash": "e34027ab413370b25b77d391ba5f83ab",
  "result": {
    "markdown": "---\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n---\n\n\n# Likert plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(likert) # For the MathAnxiety data set\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(viridis)\nlibrary(ggrepel)\n\n# Load data\ndata(mass)\n\n# Prepare data by selecting some items and creating a long format\nitems <- mass %>%\n  as_tibble() %>%\n  rename(gender = Gender) %>%\n  pivot_longer(\n    cols = -gender, \n    names_to = \"item\", \n    values_to = \"response\"\n  ) %>%\n  mutate(\n    response_num = as.numeric(response),\n    item = dplyr::recode(item, \n      \"ST24Q01\" = \"only if I have to\",\n      \"ST24Q02\" = \"favorite hobbies\",\n      \"ST24Q03\" = \"talk about books\",\n      \"ST24Q04\" = \"hard to finish\",\n      \"ST24Q05\" = \"happy as present\",\n      \"ST24Q06\" = \"waste of time\",\n      \"ST24Q07\" = \"enjoy library\",\n      \"ST24Q08\" = \"need information\",\n      \"ST24Q09\" = \"cannot sit still\",\n      \"ST24Q10\" = \"express opinions\",\n      \"ST24Q11\" = \"exchange\"\n    ),\n    item = fct_reorder(item, response_num)\n  )\n```\n:::\n\n\n## Single item plot\n\nResponses to a single Likert item are best visualized with a (relatively) simple bar plot. Improvements to a standard bar plot can consist of plotting percentages on top of each bar and plotting the numeric Likert response options (e.g., 1 to 5) on the x-axis together with a legend that contains the response labels. This way you don't run into issues with the labels being too long to place on the x-axis and you're also explicit about how Likert responses are often treated as numeric values (rather than categorical values).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter one item from the 'items' data frame\ninteresting <- filter(items, item == \"I find math interesting.\")\n\n# Calculate counts and proportions\ninteresting_counts <- interesting %>%\n  group_by(response) %>%\n  summarize(\n    response_num = first(response_num),\n    n = n()\n  ) %>%\n  mutate(pct = n / sum(n))\n\nggplot(interesting_counts, aes(x = response_num, y = pct, fill = response)) +\n  geom_col(alpha = .85) +\n  scale_y_continuous(labels = percent_format(accuracy = 1)) +\n  geom_text(\n    mapping = aes(label = paste0(round(pct * 100), \"%\")), \n    vjust = -0.5, \n    size = 3\n  ) +\n  labs(\n    x = '\"I find math interesting.\"', \n    y = \"Percentage of respondents\", \n    fill = \"Categories\"\n  ) +\n  scale_fill_viridis(discrete = TRUE, option = \"mako\", begin = .05, end = .95) +\n  theme_minimal() +\n  guides(fill = guide_legend(nrow = 2)) +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](likert-plots_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## Multiple items plots\n\nPlotting multiple Likert items is more difficult. If there are too many items, it becomes too messy to plot a bar plot for each item. Stacked bar charts are more efficient but they are difficult to interpret. To improve that interpretability, it helps to put labels on each segment of the stacked bar chart, flip the bars horizontally, and align the bars so it is easier to see where most responses lie. These are called diverging stacked bar plots. There are several packages that make this relatively straightforward to do, such as the [`likert`](https://github.com/jbryer/likert \"likert R package\") and [`HH`](https://cran.r-project.org/web/packages/HH/index.html \"HH R package\") packages, although it also possible to do it in `ggplot` with the following code.\n\n\n::: {.cell .column-page layout-align=\"center\"}\n\n```{.r .cell-code}\n# Calculate counts and proportions\ncounts <- items %>% \n  filter(!is.na(response)) %>%\n  group_by(item, response) %>%\n  summarize(\n    response_num = first(response_num),\n    n = n()\n  ) %>%\n  mutate(pct = n / sum(n)) %>%\n  ungroup()\n\n# Divide the proportion of the neutral category by half\ncounts <- mutate(counts, \n  pct_half = if_else(response_num == 3, pct / 2, pct)\n)\n\n# Separate the data frames into one for each half\ncounts_left <- filter(counts, response_num %in% 1:3) \ncounts_right <- filter(counts, response_num %in% 3:5) \n\n# Create a colors vector\ncolors <- mako(n = 5, begin = .05, end = .95)\nnames(colors) <- levels(counts$response)\n\n# Calculate label positions\nlabels <- counts %>%\n  group_by(item) %>%\n  mutate(\n    bottom_half = sum(if_else(response_num < 4, pct_half, 0)),\n    pos = cumsum(pct) - (pct / 2) - bottom_half\n  )\n\n# Create the plot\nggplot() +\n  geom_col(\n    data = counts_left,\n    mapping = aes(x = item, y = -pct_half, fill = response), \n    alpha = .85,\n    width = .5,\n  ) +\n  geom_col(\n    data = counts_right, \n    mapping = aes(x = item, y = pct_half, fill = response), \n    position = position_stack(reverse = TRUE),\n    alpha = .85,\n    width = .5\n  ) +\n  geom_text(\n    data = labels, \n    mapping = aes(\n      x = item, \n      y = pos, \n      label = paste0(round(pct * 100), \"%\"),\n    ),\n    position = position_nudge(x = 0.375),\n    size = 3,\n  ) +\n  coord_flip() +\n  scale_y_continuous(labels = percent_format(accuracy = 1)) +\n  scale_fill_manual(values = colors) +\n  labs(x = \"\", y = \"\", fill = \"Category:\") +\n  guides(fill = guide_legend(nrow = 2), color = \"none\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](likert-plots_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=960}\n:::\n:::\n",
    "supporting": [
      "likert-plots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}