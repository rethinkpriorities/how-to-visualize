{
  "hash": "65abc808c7847a5407d019c511f97554",
  "result": {
    "markdown": "---\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n---\n\n\n# Basic plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages\nlibrary(tidyverse)\nlibrary(viridis)\nlibrary(scales)\n```\n:::\n\n\n## Bar plots\n\nBar plots are ideal for plotting frequencies. Although it is easy to create a simple bar plot, there are several things that can be done to improve on them:\n\n-   If there are multiple categories, use a `fill` to further emphasize that the data represents different categories. Also think about which color to use and the ordering of the colors to best represent the data.\n\n-   Order the categories in terms of their frequency\n\n-   Add frequency labels to make it easier to see the exact frequencies\n\nThere are two basic ways to construct a bar plot in `ggplot`. The first way is to use the raw data and have `ggplot` calculate the frequencies.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = fct_rev(fct_infreq(class)), fill = class)) +\n  geom_bar(alpha = .85) +\n  geom_text(\n    stat = \"count\",\n    mapping = aes(label = after_stat(count)),\n    vjust = -0.5,\n    color = \"grey20\",\n    size = 3\n  ) +\n  labs(x = \"class\") +\n  guides(fill = \"none\") +\n  scale_fill_viridis(\n    discrete = TRUE,\n    option = \"mako\", \n    begin = .05, \n    end = .95\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](basic-plots_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nIf you want to flip the order from high to low, remove the `fct_rev()` function from the code.\n\nThe second way is to first calculate the frequencies yourself and then use the resulting data frame to plot the frequencies.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncounts <- count(mpg, class)\n\nggplot(counts, aes(x = reorder(class, n), y = n, fill = class)) +\n  geom_col(alpha = .85) +\n  geom_text(\n    mapping = aes(label = n),\n    vjust = -0.5,\n    color = \"grey20\",\n    size = 3\n  ) +\n  labs(x = \"class\", y = \"count\") +\n  guides(fill = \"none\") +\n  scale_fill_viridis(discrete = TRUE, option = \"mako\", end = .95) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](basic-plots_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n### Percentages\n\nIf you want to plot percentages instead, you can use the same two techniques as before: 1) have `ggplot` calculate the percentages or 2) do it yourself first.\n\nIf you want to have `ggplot` calculate a percentage, you can use `..count../sum(..count..)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = fct_rev(fct_infreq(class)), fill = class)) +\n  geom_bar(aes(y = after_stat(count/sum(count))), alpha = .85) +\n  geom_text(\n    mapping = aes(\n      label = percent(after_stat(count/sum(count))),\n      y = after_stat(count/sum(count))\n    ), \n    stat = \"count\", \n    vjust = -.5,\n    color = \"grey20\"\n  ) +\n  labs(x = \"class\") +\n  guides(fill = \"none\") +\n  scale_fill_viridis(\n    discrete = TRUE, \n    option = \"mako\", \n    begin = .05, \n    end = .95\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](basic-plots_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nAlternatively, you calculate the percentages yourself first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncounts <- mpg %>%\n  count(class) %>%\n  mutate(pct = n / sum(n))\n\nggplot(counts, aes(x = reorder(class, n), y = pct, fill = class)) +\n  geom_col(alpha = .85) +\n  geom_text(\n    mapping = aes(label = percent(pct)),\n    vjust = -0.5,\n    color = \"grey20\",\n    size = 3\n  ) +\n  labs(x = \"class\", y = \"count\") +\n  guides(fill = \"none\") +\n  scale_y_continuous(labels = percent_format(accuracy = 1)) +\n  scale_fill_viridis(discrete = TRUE, option = \"mako\", end = .95) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](basic-plots_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThe code of this latter approach seems to be a lot simpler, so could be recommended on that basis.\n\n### Stacked bar plots\n\nStacked bar plots can be used to add additional information to a bar plot, but they generally are difficult to interpret. It's difficult to assess the varying sizes of the stacked bar charts. Plotting Likert responses as a stacked bar char may be an exception, as long as it is accompanied by labeled percentages and rotated horizontally. See the Likert chapter for more information.\n\nUsually the better way to add additional information to a bar plot is to use faceting.\n\n## Scatter plots\n\nScatter plots are useful to visualize the relationship between two numeric variables. If this is indeed the goal of the graph, it is useful to also plot a line that summarizes the relationship.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point(alpha = .5) +\n  geom_smooth(\n    method = \"lm\",\n    alpha = .25,\n    color = \"black\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](basic-plots_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "basic-plots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}