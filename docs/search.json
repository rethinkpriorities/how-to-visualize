[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "How to Visualize",
    "section": "",
    "text": "This is a book to organize our knowledge of data visualization and to provide examples, code, templates, and functions that can be used across various Rethink Priorities projects.\nThere are several important goals we’re hoping to achieve with this book:\n\nEstablish a knowledge base about how to best represent different types of data and relationships\nProvide examples of code that can be adjusted and incorporated to suit common data visualization needs\nEstablish different color palettes that can be consistently used within and between Rethink Priorities projects\nShowcase examples of functions from the rethinkpriorities package that relate to data visualization\nBe inclusive by designing responsive and color-blind friendly graphs\n\nIf you have feedback, please contact any of the people below or create an issue on the GitHub repository."
  },
  {
    "objectID": "index.html#important",
    "href": "index.html#important",
    "title": "How to Visualize",
    "section": "Important",
    "text": "Important\nThis is a work in progress! At this point I would not even call it an alpha, so please be patient while we finalize this book!"
  },
  {
    "objectID": "index.html#contributions",
    "href": "index.html#contributions",
    "title": "How to Visualize",
    "section": "Contributions",
    "text": "Contributions\nPlease add yourself to the list below to acknowledge your contributions.\n\nWillem Sleegers: willem@rethinkpriorities.org\nJamie Elsey: jamie@rethinkpriorities.org\nDavid Reinstein: dreinstein@rethinkpriorities.org"
  },
  {
    "objectID": "chapters/best-practices.html",
    "href": "chapters/best-practices.html",
    "title": "1  Best practices",
    "section": "",
    "text": "Aim to use the ggplot R package for creating plots. ggplot is a powerful visualization package and should enable us to create the kind of plots we want to present. If we all use ggplot, we can write code that can be re-used by each other. It also makes it easy to write custom themes and color palettes that can be re-used, which will produce a consistency within and between projects that people are likely to appreciate.\nAlways save the plot as an object in the environment as well as printing it where it belongs.\n‘Piping data into the ggplot’ to make the code more portable and readable. Keep steps separate."
  },
  {
    "objectID": "chapters/best-practices.html#re-usability",
    "href": "chapters/best-practices.html#re-usability",
    "title": "1  Best practices",
    "section": "1.2 Re-usability",
    "text": "1.2 Re-usability\nIdeally, we will come up with a set of functions and default options for the key sets of plots we use and like. Otherwise define sets of common options for plots in one place, and repeated ggplot elements together as a list to avoid repetition and clutter and to to allow easy ‘global’ adjustment.\nHowever, there are times in which too much automation makes things less flexible and increases mental overhead. We’ll come to good compromises."
  },
  {
    "objectID": "chapters/best-practices.html#labeling",
    "href": "chapters/best-practices.html#labeling",
    "title": "1  Best practices",
    "section": "1.3 Labeling",
    "text": "1.3 Labeling\nUse readable but concise labels. Examples of good labels are:\n\n“Amount donated”\n“GWWC” (we can assume people know what GWWC is)\n\nExamples of bad labels are:\n\namt_don\n\nCoding-wise: Define and reuse lists of labels (or use inherent labeling options where these exist, to exploit existing variable and value labels.)"
  },
  {
    "objectID": "chapters/best-practices.html#anonymity",
    "href": "chapters/best-practices.html#anonymity",
    "title": "1  Best practices",
    "section": "1.4 Anonymity",
    "text": "1.4 Anonymity\nWe should make sure that the real data we plot is anonymous. There are several tricks we can use to assure the anonymity of the data.\n\nPlot approximations of the data, rather than actual data itself. This can be done with geoms such as geom_jitter or the position argument.\nDisable hover information in interactive plots."
  },
  {
    "objectID": "chapters/basic-plots.html",
    "href": "chapters/basic-plots.html",
    "title": "2  Basic plots",
    "section": "",
    "text": "Code\n# Load required packages\nlibrary(tidyverse)\nlibrary(viridis)"
  },
  {
    "objectID": "chapters/basic-plots.html#bar-plots",
    "href": "chapters/basic-plots.html#bar-plots",
    "title": "2  Basic plots",
    "section": "2.1 Bar plots",
    "text": "2.1 Bar plots\nBar plots are ideal for plotting frequencies. Although it is easy to create a simple bar plot, there are several things that can be done to improve on them:\n\nIf there are multiple categories, use a fill to further emphasize that the data represents different categories.\nOrder the categories in terms of their frequency\nAdd frequency labels to make it easier to see the exact frequencies\n\nThere are two basic ways to construct a bar plot in ggplot. The first way is to use the raw data and have ggplot calculate the frequencies.\n\n\nCode\nggplot(mpg, aes(x = fct_rev(fct_infreq(class)), fill = class)) +\n  geom_bar(alpha = .85) +\n  geom_text(\n    stat = \"count\", \n    mapping = aes(label = ..count..), \n    vjust = -0.5, \n    color = \"grey20\",\n    size = 3\n  ) +\n  labs(x = \"class\") +\n  guides(fill = \"none\") +\n  scale_fill_viridis(discrete = TRUE, option = \"mako\", end = .95) +\n  theme_minimal()\n\n\n\n\n\nIf you want to flip the order from high to low, remove the fct_rev() function from the code.\nThe second way is to first calculate the frequencies yourself and then use the resulting data frame to plot the frequencies.\n\n\nCode\ncounts <- count(mpg, class)\n\nggplot(counts, aes(x = reorder(class, n), y = n, fill = class)) +\n  geom_col(alpha = .85) +\n  geom_text(\n    mapping = aes(label = n), \n    vjust = -0.5, \n    color = \"grey20\",\n    size = 3\n  ) +\n  labs(x = \"class\", y = \"count\") +\n  guides(fill = \"none\") +\n  scale_fill_viridis(discrete = TRUE, option = \"mako\", end = .95) +\n  theme_minimal()\n\n\n\n\n\n\n2.1.1 Stacked bar plots\nStacked bar plots can be used to add additional information to a bar plot.\n\n\nCode\nhead(beaver1, n = 5)\n##   day time  temp activ\n## 1 346  840 36.33     0\n## 2 346  850 36.34     0\n## 3 346  900 36.35     0\n## 4 346  910 36.42     0\n## 5 346  920 36.55     0\n\n\nThe following graph is a stacked bar plot.\n\n\nCode\nggplot(mpg, aes(x = class, fill = drv)) +\n  geom_bar(alpha = .85) +\n  scale_fill_viridis(discrete = TRUE, option = \"mako\", end = .95)"
  },
  {
    "objectID": "chapters/basic-plots.html#scatter-plots",
    "href": "chapters/basic-plots.html#scatter-plots",
    "title": "2  Basic plots",
    "section": "2.2 Scatter plots",
    "text": "2.2 Scatter plots\n\n2.2.1 Simple scatter plot\n\n\nCode\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point(alpha = .85)\n\n\n\n\n\n\n\n2.2.2 Jittered scatter plot\n\n\nCode\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_jitter(alpha = .85, width = 0.5, height = 0.5)\n\n\n\n\n\n\n\n2.2.3 Multiple scatter plot\n\n\nCode\nggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +\n  geom_point(alpha = .85) +\n  scale_color_viridis(discrete = TRUE, option = \"mako\", end = .95)"
  },
  {
    "objectID": "chapters/basic-plots.html#line-plots",
    "href": "chapters/basic-plots.html#line-plots",
    "title": "2  Basic plots",
    "section": "2.3 Line plots",
    "text": "2.3 Line plots\n\n2.3.1 Simple line plot\n\n\nCode\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_line()\n\n\n\n\n\n\n\n2.3.2 Multiple lines plot\n\n\nCode\nggplot(economics_long, aes(x = date, y = value01, \n    color = variable)) +\n  geom_line() +\n  scale_color_viridis(discrete = TRUE, option = \"mako\", end = .95)\n\n\n\n\n\n\n\n\n\nSource Code\n---\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n---\n\n# Basic plots\n\n```{r}\n#| message: false\n# Load required packages\nlibrary(tidyverse)\nlibrary(viridis)\n```\n\n## Bar plots\n\nBar plots are ideal for plotting frequencies. Although it is easy to create a simple bar plot, there are several things that can be done to improve on them:\n\n-   If there are multiple categories, use a `fill` to further emphasize that the data represents different categories.\n\n-   Order the categories in terms of their frequency\n\n-   Add frequency labels to make it easier to see the exact frequencies\n\nThere are two basic ways to construct a bar plot in `ggplot`. The first way is to use the raw data and have `ggplot` calculate the frequencies.\n\n```{r}\nggplot(mpg, aes(x = fct_rev(fct_infreq(class)), fill = class)) +\n  geom_bar(alpha = .85) +\n  geom_text(\n    stat = \"count\", \n    mapping = aes(label = ..count..), \n    vjust = -0.5, \n    color = \"grey20\",\n    size = 3\n  ) +\n  labs(x = \"class\") +\n  guides(fill = \"none\") +\n  scale_fill_viridis(discrete = TRUE, option = \"mako\", end = .95) +\n  theme_minimal()\n```\n\nIf you want to flip the order from high to low, remove the `fct_rev()` function from the code.\n\nThe second way is to first calculate the frequencies yourself and then use the resulting data frame to plot the frequencies.\n\n```{r}\ncounts <- count(mpg, class)\n\nggplot(counts, aes(x = reorder(class, n), y = n, fill = class)) +\n  geom_col(alpha = .85) +\n  geom_text(\n    mapping = aes(label = n), \n    vjust = -0.5, \n    color = \"grey20\",\n    size = 3\n  ) +\n  labs(x = \"class\", y = \"count\") +\n  guides(fill = \"none\") +\n  scale_fill_viridis(discrete = TRUE, option = \"mako\", end = .95) +\n  theme_minimal()\n```\n\n### Stacked bar plots\n\nStacked bar plots can be used to add additional information to a bar plot.\n\n```{r collapse=TRUE}\nhead(beaver1, n = 5)\n```\n\nThe following graph is a stacked bar plot.\n\n```{r}\nggplot(mpg, aes(x = class, fill = drv)) +\n  geom_bar(alpha = .85) +\n  scale_fill_viridis(discrete = TRUE, option = \"mako\", end = .95) \n```\n\n## Scatter plots\n\n### Simple scatter plot\n\n```{r}\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point(alpha = .85)\n```\n\n### Jittered scatter plot\n\n```{r}\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_jitter(alpha = .85, width = 0.5, height = 0.5)\n```\n\n### Multiple scatter plot\n\n```{r}\nggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +\n  geom_point(alpha = .85) +\n  scale_color_viridis(discrete = TRUE, option = \"mako\", end = .95)\n```\n\n## Line plots\n\n### Simple line plot\n\n```{r}\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_line()\n```\n\n### Multiple lines plot\n\n```{r}\nggplot(economics_long, aes(x = date, y = value01, \n    color = variable)) +\n  geom_line() +\n  scale_color_viridis(discrete = TRUE, option = \"mako\", end = .95)\n```"
  },
  {
    "objectID": "chapters/likert-plots.html#single-item-plot",
    "href": "chapters/likert-plots.html#single-item-plot",
    "title": "3  Likert plots",
    "section": "3.1 Single item plot",
    "text": "3.1 Single item plot\n\nggplot(magazines_counts, aes(x = response_num, y = pct, fill = response)) +\n  geom_col(alpha = .8) +\n  scale_y_continuous(labels = percent_format(accuracy = 1)) +\n  geom_text(\n    mapping = aes(label = paste0(round(pct * 100), \"%\")), \n    vjust = -0.5, \n    size = 3\n  ) +\n  labs(\n    x = \"Frequency reading magazines\", \n    y = \"Percentage of respondents\", \n    fill = \"Categories\"\n  ) +\n  scale_fill_viridis(discrete = TRUE, option = \"mako\", begin = .1, end = .9) +\n  theme_minimal() +\n  guides(fill = guide_legend(nrow = 2)) +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "chapters/likert-plots.html#multiple-items-plots",
    "href": "chapters/likert-plots.html#multiple-items-plots",
    "title": "3  Likert plots",
    "section": "3.2 Multiple items plots",
    "text": "3.2 Multiple items plots\n\nggplot(counts, aes(\n      x = item,\n      y = pct,\n      fill = reorder(response, desc(response))\n    )\n  ) +\n  geom_col(alpha = .8) +\n  coord_flip() +\n  geom_text(\n    mapping = aes(label = paste0(round(pct * 100), \"%\")),\n    position = position_stack(vjust = 0.5),\n    size = 3\n  ) +\n  scale_fill_viridis(\n    discrete = TRUE,\n    option = \"mako\",\n    direction = -1,\n    begin = .1,\n    end = .9\n  ) +\n  scale_y_continuous(labels = percent_format(accuracy = 1)) +\n  labs(\n    x = \"\",\n    y = \"\",\n    color = \"Rating\",\n    fill = \"Rating\"\n  ) +\n  theme_minimal() +\n  guides(fill = guide_legend(nrow = 2)) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n# Calculate halves of the neutral category\ncounts_split <- counts %>% \n  filter(response_num == 3) %>% \n  mutate(pct = pct / 2) \n\n# Replace old neutral-category\nnew_counts <- filter(counts, response_num != 3)\nnew_counts <- full_join(new_counts, counts_split) %>%\n  arrange(item, response_num)\n\n# Separate the data frames\nnew_counts1 <- filter(new_counts, response_num %in% 1:3) \nnew_counts2 <- filter(new_counts, response_num %in% 3:5) \n\n# Create a colors vector\ncolors <- mako(n = 5, begin = .1, end = .9)\nnames(colors) <- levels(counts$response)\n\n# Plot  \np <- ggplot() +\n  geom_col(\n    data = new_counts1, \n    mapping = aes(x = item, y = -pct, fill = response), \n    alpha = .8\n  ) +\n  geom_col(\n    data = new_counts2, \n    mapping = aes(x = item, y = pct, fill = response), \n    position = position_stack(reverse = TRUE),\n    alpha = .8\n  ) +\n  coord_flip() +\n  scale_y_continuous(labels = percent_format(accuracy = 1)) +\n  scale_fill_manual(values = colors) +\n  labs(x = \"\", y = \"\", fill = \"Category:\") +\n  theme_minimal() +\n  guides(fill = guide_legend(nrow = 2)) +\n  theme(legend.position = \"bottom\")\n\np \n\n\n\n\n\n# Create labels\nlabels <- counts %>%\n  group_by(item) %>%\n  mutate(\n    temp = case_when(\n      response_num == 3 ~ pct / 2,\n      response_num < 4 ~ pct,\n      TRUE ~ 0),\n    bottom_half = sum(temp),\n    pos = cumsum(pct) - (pct / 2) - bottom_half\n  )\n\np + geom_text(\n  data = labels, \n  mapping = aes(\n    x = item, \n    y = pos, \n    label = paste0(round(pct * 100), \"%\")\n  ),\n  size = 3\n)"
  },
  {
    "objectID": "chapters/likert-plots.html#to-do",
    "href": "chapters/likert-plots.html#to-do",
    "title": "3  Likert plots",
    "section": "3.3 To do",
    "text": "3.3 To do\nThe combination of stacked bar charts and overlayed error/CI bars for some ‘middle split’ seems informative:\nSee here for an example of a summary chart."
  }
]