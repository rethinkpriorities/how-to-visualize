[
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "How to Visualize",
    "section": "",
    "text": "Establish a knowledge base about how to best represent different types of data and relationships\nProvide examples of code that can be adjusted and incorporated to suit common data visualization needs\nEstablish different color palettes that can be consistently used within and between Rethink Priorities projects\nShowcase examples of functions from the rethinkpriorities package that relate to data visualization\nBe inclusive by designing responsive and color-blind friendly graphs",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html#important",
    "href": "index.html#important",
    "title": "How to Visualize",
    "section": "Important",
    "text": "Important\nThis is a work in progress! At this point I would not even call it an alpha, so please be patient while we finalize this book!",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html#contributions",
    "href": "index.html#contributions",
    "title": "How to Visualize",
    "section": "Contributions",
    "text": "Contributions\nPlease add yourself to the list below to acknowledge your contributions.\n\nWillem Sleegers: willem@rethinkpriorities.org\nJamie Elsey: jamie@rethinkpriorities.org\nDavid Reinstein: dreinstein@rethinkpriorities.org",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "chapters/best-practices.html#using-ggplot",
    "href": "chapters/best-practices.html#using-ggplot",
    "title": "1  Best practices",
    "section": "1.1 Using ggplot",
    "text": "1.1 Using ggplot\nAim to use the ggplot R package for creating plots. ggplot is a powerful visualization package and should enable us to create the kind of plots we want to present. If we all use ggplot, we can write code that can be re-used by each other. It also makes it easy to write custom themes and color palettes that can be re-used, which will produce a consistency within and between projects that people are likely to appreciate.\nAlways save the plot as an object in the environment as well as printing it where it belongs.\n‘Piping data into the ggplot’ to make the code more portable and readable. Keep steps separate."
  },
  {
    "objectID": "chapters/best-practices.html#re-usability",
    "href": "chapters/best-practices.html#re-usability",
    "title": "1  Best practices",
    "section": "1.2 Re-usability",
    "text": "1.2 Re-usability\nIdeally, we will come up with a set of functions and default options for the key sets of plots we use and like. Otherwise define sets of common options for plots in one place, and repeated ggplot elements together as a list to avoid repetition and clutter and to to allow easy ‘global’ adjustment.\nHowever, there are times in which too much automation makes things less flexible and increases mental overhead. We’ll come to good compromises."
  },
  {
    "objectID": "chapters/best-practices.html#labeling",
    "href": "chapters/best-practices.html#labeling",
    "title": "1  Best practices",
    "section": "1.3 Labeling",
    "text": "1.3 Labeling\nUse readable but concise labels. Examples of good labels are:\n\n“Amount donated”\n“GWWC” (we can assume people know what GWWC is)\n\nExamples of bad labels are:\n\namt_don"
  },
  {
    "objectID": "chapters/best-practices.html#consistency",
    "href": "chapters/best-practices.html#consistency",
    "title": "1  Best practices",
    "section": "1.4 Consistency",
    "text": "1.4 Consistency\nBe consistent throughout an article or report in terms of:\n\nLabels\nColor scheme\nColors matched to categories (e.g., if you match a particular color to a gender, make sure to keep using the same color to represent that gender)\nFonts"
  },
  {
    "objectID": "chapters/best-practices.html#anonymity",
    "href": "chapters/best-practices.html#anonymity",
    "title": "1  Best practices",
    "section": "1.5 Anonymity",
    "text": "1.5 Anonymity\nWe should make sure that the real data we plot is anonymous. There are several tricks we can use to assure the anonymity of the data.\n\nPlot approximations of the data, rather than actual data itself. This can be done with geoms such as geom_jitter or the position argument.\nDisable hover information in interactive plots."
  },
  {
    "objectID": "chapters/basic-plots.html#bar-plots",
    "href": "chapters/basic-plots.html#bar-plots",
    "title": "\n2  Basic plots\n",
    "section": "",
    "text": "If there are multiple categories, use a fill to further emphasize that the data represents different categories. Also think about which color to use and the ordering of the colors to best represent the data.\nOrder the categories in terms of their frequency\nAdd frequency labels to make it easier to see the exact frequencies\n\n\n\n\n\n\n\n2.1.1 Percentages\nIf you want to plot percentages instead, you can use the same two techniques as before: 1) have ggplot calculate the percentages or 2) do it yourself first.\nIf you want to have ggplot calculate a percentage, you can use ..count../sum(..count..).\n\nCodeggplot(mpg, aes(x = fct_rev(fct_infreq(class)), fill = class)) +\n  geom_bar(aes(y = after_stat(count/sum(count))), alpha = .85) +\n  geom_text(\n    mapping = aes(\n      label = percent(after_stat(count/sum(count))),\n      y = after_stat(count/sum(count))\n    ), \n    stat = \"count\", \n    vjust = -.5,\n    color = \"grey20\"\n  ) +\n  labs(x = \"class\") +\n  guides(fill = \"none\") +\n  scale_fill_viridis(\n    discrete = TRUE, \n    option = \"mako\", \n    begin = .05, \n    end = .95\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\nAlternatively, you calculate the percentages yourself first.\n\nCodecounts &lt;- mpg %&gt;%\n  count(class) %&gt;%\n  mutate(pct = n / sum(n))\n\nggplot(counts, aes(x = reorder(class, n), y = pct, fill = class)) +\n  geom_col(alpha = .85) +\n  geom_text(\n    mapping = aes(label = percent(pct)),\n    vjust = -0.5,\n    color = \"grey20\",\n    size = 3\n  ) +\n  labs(x = \"class\", y = \"count\") +\n  guides(fill = \"none\") +\n  scale_y_continuous(labels = percent_format(accuracy = 1)) +\n  scale_fill_viridis(discrete = TRUE, option = \"mako\", end = .95) +\n  theme_minimal()\n\n\n\n\n\n\n\nThe code of this latter approach seems to be a lot simpler, so could be recommended on that basis.\n\n2.1.2 Stacked bar plots\nStacked bar plots can be used to add additional information to a bar plot, but they generally are difficult to interpret. It’s difficult to assess the varying sizes of the stacked bar charts. Plotting Likert responses as a stacked bar char may be an exception, as long as it is accompanied by labeled percentages and rotated horizontally. See the Likert chapter for more information.\nUsually the better way to add additional information to a bar plot is to use faceting.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basic plots</span>"
    ]
  },
  {
    "objectID": "chapters/basic-plots.html#scatter-plots",
    "href": "chapters/basic-plots.html#scatter-plots",
    "title": "\n2  Basic plots\n",
    "section": "\n2.2 Scatter plots",
    "text": "2.2 Scatter plots\nScatter plots are useful to visualize the relationship between two numeric variables. If this is indeed the goal of the graph, it is useful to also plot a line that summarizes the relationship.\n\nCodeggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point(alpha = .5) +\n  geom_smooth(\n    method = \"lm\",\n    alpha = .25,\n    color = \"black\"\n  ) +\n  theme_minimal()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basic plots</span>"
    ]
  },
  {
    "objectID": "chapters/likert-plots.html#single-item-plot",
    "href": "chapters/likert-plots.html#single-item-plot",
    "title": "\n3  Likert plots\n",
    "section": "\n3.1 Single item plot",
    "text": "3.1 Single item plot\nResponses to a single Likert item are best visualized with a (relatively) simple bar plot. Improvements to a standard bar plot can consist of plotting percentages on top of each bar and plotting the numeric Likert response options (e.g., 1 to 5) on the x-axis together with a legend that contains the response labels. This way you don’t run into issues with the labels being too long to place on the x-axis and you’re also explicit about how Likert responses are often treated as numeric values (rather than categorical values).\n\nCodeinteresting &lt;- filter(items, item == \"I find math interesting.\")\n\ninteresting_props &lt;- interesting %&gt;%\n  group_by(response) %&gt;%\n  summarize(\n    response_num = first(response_num),\n    n = n()\n  ) %&gt;%\n  mutate(pct = n / sum(n))\n\nggplot(interesting_props, aes(x = response, y = pct, fill = response)) +\n  geom_col(alpha = .85) +\n  scale_y_continuous(labels = percent_format(accuracy = 1)) +\n  geom_text(\n    mapping = aes(label = paste0(round(pct * 100), \"%\")), \n    vjust = -0.5, \n    size = 3\n  ) +\n  labs(\n    x = '\"I find math interesting.\"', \n    y = \"Percentage of respondents\", \n    fill = \"Categories\"\n  ) +\n  scale_fill_manual(values = colors) +\n  guides(fill = \"none\") +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "chapters/likert-plots.html#multiple-items-plots",
    "href": "chapters/likert-plots.html#multiple-items-plots",
    "title": "\n3  Likert plots\n",
    "section": "\n3.2 Multiple items plots",
    "text": "3.2 Multiple items plots\nPlotting multiple Likert items is more difficult. If there are too many items, it becomes too messy to plot a bar plot for each item. Stacked bar charts are more efficient but they are difficult to interpret. To improve that interpretability, it helps to put labels on each segment of the stacked bar chart, flip the bars horizontally, and align the bars so it is easier to see where most responses lie. These are called diverging stacked bar plots. There are several packages that make this relatively straightforward to do, such as the likert and HH packages, although they don’t let you construct your own ggplot2 plot. Instead, you can use a geom from the willemverse to position a stacked bar geom in the same way.\n\nCodeitem_props &lt;- items %&gt;% \n  filter(!is.na(response)) %&gt;%\n  count(item, response, response_num) %&gt;%\n  group_by(item) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup()\n\nggplot(item_props, aes(x = item, y = pct, fill = response)) +\n  geom_col(position = \"likert\", alpha = .85, width = .5) +\n  geom_text(\n    aes(label = paste0(round(pct * 100), \"%\")),\n    position = position_likert(nudge = .4),\n    size = 3,\n  ) +\n  coord_flip() +\n  scale_x_discrete(labels = wrap_format(20)) +\n  scale_y_continuous(labels = percent_format(accuracy = 1)) +\n  scale_fill_manual(values = colors) +\n  labs(x = \"\", y = \"\", fill = \"Category:\") +\n  guides(fill = guide_legend(nrow = 2), color = \"none\") +\n  theme(legend.position = \"top\")"
  },
  {
    "objectID": "chapters/labels.html#labels-on-top-of-geoms",
    "href": "chapters/labels.html#labels-on-top-of-geoms",
    "title": "\n4  Plotting labels\n",
    "section": "\n4.1 Labels on top of geoms",
    "text": "4.1 Labels on top of geoms\nA common usecase for labels is to put them on top of a geom, like a bar geom. You can do this with geom_text(), which by default positions the text at the same height as the bar, which is not ideal. Instead, you can adjust its position using vjust.\n\nCodedata &lt;- tibble(\n  x = c(\"A\", \"B\", \"C\"),\n  y = 1:3\n)\n\nggplot(data, aes(x = x, y = y)) +\n  geom_col() +\n  geom_text(aes(label = y), vjust = unit(-1, \"lines\")) +\n  coord_cartesian(ylim = c(0, 3.5)) +\n  theme_minimal()"
  },
  {
    "objectID": "chapters/labels.html#long-labels",
    "href": "chapters/labels.html#long-labels",
    "title": "\n5  Plotting labels\n",
    "section": "\n5.2 Long labels",
    "text": "5.2 Long labels\nSometimes you have very long labels (e.g., factor levels) that overlap each other when you plot them in a graph. One way to solve this is by using the label_wrap() function from the scales package.\n\nCodedata &lt;- tibble(\n  x = c(\n    \"this is a long label that's pretty long\",\n    \"this is another long label that's pretty long, longer even\",\n    \"this is another long label that's so long that you might\n      wonder why it is on the x-axis\"\n  ),\n  y = 1:3\n)\n\nggplot(data, aes(x = x, y = y)) +\n  geom_col() +\n  scale_x_discrete(labels = label_wrap(40)) +\n  theme_minimal()",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Labels on top of geoms</span>"
    ]
  },
  {
    "objectID": "chapters/labels.html#labels-next-to-the-plot",
    "href": "chapters/labels.html#labels-next-to-the-plot",
    "title": "\n5  Plotting labels\n",
    "section": "\n5.3 Labels next to the plot",
    "text": "5.3 Labels next to the plot\nIf you want to label, for example, every bar plot, but the height of the bar could cover the entire range of the plot area, then you may want to put labels next to the plot. This is tricky to do, but below is sort of a hacky solution to get it done. The trick is to add a rectangle to the plot and position it where you want the labels to go. Since this will be outside of the grid area of the plot, we have to specify the limits of the plotting area (see scale_x_continuous() in the code below). Optionally you can reduce the default spacing between the plots by setting mult to c(0, 0).\n\nCodedata &lt;- tibble(\n  x = rep(c(.5, .25, .05, -.05, -.25, -.5), 4),\n  y = rep(c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"), 4),\n  facet = rep(c(\"A\", \"B\", \"C\", \"D\"), each = 6)\n)\n\nggplot(data, aes(x = x, y = y)) +\n  geom_col() +\n  facet_wrap(~facet) +\n  geom_rect(\n    aes(xmin = 1, xmax = Inf, ymin = -Inf, ymax = Inf),\n    fill = \"white\"\n  ) +\n  geom_text(\n    aes(x = 1.125, y = y, label = format(round(x, 2), nsmall = 2)),\n    size = 3,\n    alpha = .8,\n    hjust = .5\n  ) +\n  scale_x_continuous(\n    limits = c(-1, 1.25),\n    expand = expansion(mult = c(0, 0))\n  ) +\n  theme_minimal()",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Labels on top of geoms</span>"
    ]
  },
  {
    "objectID": "chapters/tips-tricks.html#removing-the-legend",
    "href": "chapters/tips-tricks.html#removing-the-legend",
    "title": "\n5  More tips and tricks\n",
    "section": "\n5.1 Removing the legend",
    "text": "5.1 Removing the legend\nYou can remove the legend by using the guides() element. Simply set the aesthetic that you don’t want a legend of to \"none\".\n\nCodedata &lt;- tibble(x = 1:5, y = 1:5)\nggplot(data, aes(x, y, fill = factor(x))) +\n  geom_col() +\n  guides(fill = \"none\") +\n  theme_minimal()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "How to Visualize",
    "section": "",
    "text": "About\nThis is a book to organize our knowledge of data visualization and to provide examples, code, templates, and functions that can be used across various Rethink Priorities projects.\nThere are several important goals we’re hoping to achieve with this book:\nIf you have feedback, please contact any of the people below or create an issue on the GitHub repository.",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "chapters/basic-plots.html",
    "href": "chapters/basic-plots.html",
    "title": "Basic plots",
    "section": "",
    "text": "This section covers basic plots.",
    "crumbs": [
      "Basic plots"
    ]
  },
  {
    "objectID": "chapters/advanced-plots/likert-plots.html",
    "href": "chapters/advanced-plots/likert-plots.html",
    "title": "\n4  Likert plots\n",
    "section": "",
    "text": "4.1 Single item plot\nResponses to a single Likert item are best visualized with a (relatively) simple bar plot. Improvements to a standard bar plot can consist of plotting percentages on top of each bar and plotting the numeric Likert response options (e.g., 1 to 5) on the x-axis together with a legend that contains the response labels. This way you don’t run into issues with the labels being too long to place on the x-axis and you’re also explicit about how Likert responses are often treated as numeric values (rather than categorical values).\nCodeinteresting &lt;- filter(items, item == \"I find math interesting.\")\n\ninteresting_props &lt;- interesting %&gt;%\n  group_by(response) %&gt;%\n  summarize(\n    response_num = first(response_num),\n    n = n()\n  ) %&gt;%\n  mutate(pct = n / sum(n))\n\nggplot(interesting_props, aes(x = response, y = pct, fill = response)) +\n  geom_col(alpha = .85) +\n  scale_y_continuous(labels = percent_format(accuracy = 1)) +\n  geom_text(\n    mapping = aes(label = paste0(round(pct * 100), \"%\")),\n    vjust = -0.5,\n    size = 3\n  ) +\n  labs(\n    x = '\"I find math interesting.\"',\n    y = \"Percentage of respondents\",\n    fill = \"Categories\"\n  ) +\n  scale_fill_manual(values = colors) +\n  guides(fill = \"none\") +\n  theme(legend.position = \"bottom\")",
    "crumbs": [
      "Advanced plots",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Likert plots</span>"
    ]
  },
  {
    "objectID": "chapters/advanced-plots/likert-plots.html#multiple-items-plots",
    "href": "chapters/advanced-plots/likert-plots.html#multiple-items-plots",
    "title": "\n4  Likert plots\n",
    "section": "\n4.2 Multiple items plots",
    "text": "4.2 Multiple items plots\nPlotting multiple Likert items is more difficult. If there are too many items, it becomes too messy to plot a bar plot for each item. Stacked bar charts are more efficient but they are difficult to interpret. To improve that interpretability, it helps to put labels on each segment of the stacked bar chart, flip the bars horizontally, and align the bars so it is easier to see where most responses lie. These are called diverging stacked bar plots. There are several packages that make this relatively straightforward to do, such as the likert and HH packages, although they don’t let you construct your own ggplot2 plot. Instead, you can use a position function from the willemverse to position a stacked bar geom in the same way.\n\nCodeitem_props &lt;- items %&gt;%\n  filter(!is.na(response)) %&gt;%\n  count(item, response, response_num) %&gt;%\n  group_by(item) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup()\n\nggplot(item_props, aes(y = item, x = pct, fill = response)) +\n  geom_col(position = \"likert\", alpha = .85) +\n  geom_text(\n    aes(label = paste0(round(pct * 100), \"%\")),\n    position = position_likert(),\n    size = 3,\n  ) +\n  scale_x_continuous(labels = percent_format(accuracy = 1)) +\n  scale_y_discrete(labels = wrap_format(20)) +\n  scale_fill_manual(values = colors) +\n  labs(x = \"\", y = \"\", fill = \"Category:\") +\n  guides(fill = guide_legend(nrow = 2), color = \"none\") +\n  theme(legend.position = \"bottom\")",
    "crumbs": [
      "Advanced plots",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Likert plots</span>"
    ]
  },
  {
    "objectID": "chapters/labels.html",
    "href": "chapters/labels.html",
    "title": "\n5  Plotting labels\n",
    "section": "",
    "text": "5.1 Labels on top of geoms\nA common usecase for labels is to put them on top of a geom, like a bar geom. You can do this with geom_text(), which by default positions the text at the same height as the bar, which is not ideal. Instead, you can adjust its position using vjust.\nCodedata &lt;- tibble(\n  x = c(\"A\", \"B\", \"C\"),\n  y = 1:3\n)\n\nggplot(data, aes(x = x, y = y)) +\n  geom_col() +\n  geom_text(aes(label = y), vjust = unit(-1, \"lines\")) +\n  coord_cartesian(ylim = c(0, 3.5)) +\n  theme_minimal()",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Labels on top of geoms</span>"
    ]
  },
  {
    "objectID": "chapters/tips-tricks.html",
    "href": "chapters/tips-tricks.html",
    "title": "\n5  More tips and tricks\n",
    "section": "",
    "text": "5.1 Removing the legend\nYou can remove the legend by using the guides() element. Simply set the aesthetic that you don’t want a legend of to \"none\".\nCodedata &lt;- tibble(x = 1:5, y = 1:5)\nggplot(data, aes(x, y, fill = factor(x))) +\n  geom_col() +\n  guides(fill = \"none\") +\n  theme_minimal()",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Tips and tricks</span>"
    ]
  },
  {
    "objectID": "chapters/advanced-plots.html",
    "href": "chapters/advanced-plots.html",
    "title": "Advanced plots",
    "section": "",
    "text": "This section covers advanced plots.",
    "crumbs": [
      "Advanced plots"
    ]
  },
  {
    "objectID": "chapters/basic-plots/bar-plots.html",
    "href": "chapters/basic-plots/bar-plots.html",
    "title": "\n2  Bar plots\n",
    "section": "",
    "text": "2.1 Setup\nCodelibrary(tidyverse)\nlibrary(scales)\n\nlighter_blue &lt;- \"#BFE7F4\"\nlight_blue &lt;- \"#7ED2F1\"\nblue &lt;- \"#327291\"\nyellow &lt;- \"#FBB21D\"\ndark_gray &lt;- \"#303A40\"\ngray &lt;- \"#464D53\"\n\ntheme_set(theme_minimal(base_size = 17))\nupdate_geom_defaults(\"bar\", aes(fill = blue))\nupdate_geom_defaults(\"text\", aes(color = \"gray20\"))\nupdate_geom_defaults(\"label\", aes(color = \"gray20\"))",
    "crumbs": [
      "Basic plots",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Bar plots</span>"
    ]
  },
  {
    "objectID": "chapters/basic-plots/scatter-plots.html",
    "href": "chapters/basic-plots/scatter-plots.html",
    "title": "\n3  Scatter plots\n",
    "section": "",
    "text": "Codelibrary(tidyverse)\nlibrary(scales)\n\n\nScatter plots are useful to visualize the relationship between two numeric variables. If this is indeed the goal of the graph, it is useful to also plot a line that summarizes the relationship.\n\nCodeggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point(alpha = .5) +\n  geom_smooth(\n    method = \"lm\",\n    alpha = .25,\n    color = \"black\"\n  ) +\n  theme_minimal()",
    "crumbs": [
      "Basic plots",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Scatter plots</span>"
    ]
  },
  {
    "objectID": "chapters/basic-plots/bar-plots.html#frequencies",
    "href": "chapters/basic-plots/bar-plots.html#frequencies",
    "title": "\n2  Bar plots\n",
    "section": "\n2.2 Frequencies",
    "text": "2.2 Frequencies\nBar plots are ideal for plotting frequencies. Although it is easy to create a simple bar plot, there are several things that can be done to improve on them:\n\nOrder the categories in terms of their frequency\nAdd frequency labels to make it easier to see the exact frequencies\n\nThere are two basic ways to construct a bar plot in ggplot. The first way is to use the raw data and have ggplot calculate the frequencies.\n\nCodeggplot(mpg, aes(x = fct_rev(fct_infreq(class)))) +\n  geom_bar() +\n  geom_label(\n    stat = \"count\",\n    mapping = aes(label = after_stat(count)),\n    vjust = 1,\n    color = \"white\",\n    fill = \"transparent\",\n    label.size = NA,\n    label.padding = unit(0.5, \"lines\")\n  ) +\n  labs(x = \"class\") +\n  guides(fill = \"none\") +\n  labs(x = \"test\") +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +\n  theme(\n    panel.grid.major.x = element_blank()\n  )\n\n\n\nBar plot with counts calculated by ggplot2\n\n\n\nIf you want to flip the order from high to low, remove the fct_rev() function from the code.\nThe second way is to first calculate the frequencies yourself and then use the resulting data frame to plot the frequencies.\n\nCodecounts &lt;- count(mpg, class)\n\nggplot(counts, aes(x = reorder(class, n), y = n, fill = class)) +\n  geom_col(alpha = .85) +\n  geom_text(\n    mapping = aes(label = n),\n    vjust = -0.5,\n    color = \"grey20\",\n    size = 3\n  ) +\n  labs(x = \"class\", y = \"count\") +\n  guides(fill = \"none\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n2.2.1 Percentages\nIf you want to plot percentages instead, you can use the same two techniques as before: 1) have ggplot calculate the percentages or 2) do it yourself first.\nIf you want to have ggplot calculate a percentage, you can use ..count../sum(..count..).\n\nCodeggplot(mpg, aes(x = fct_rev(fct_infreq(class)), fill = class)) +\n  geom_bar(aes(y = after_stat(count / sum(count))), alpha = .85) +\n  geom_text(\n    mapping = aes(\n      label = percent(after_stat(count / sum(count))),\n      y = after_stat(count / sum(count))\n    ),\n    stat = \"count\",\n    vjust = -.5,\n    color = \"grey20\"\n  ) +\n  labs(x = \"class\") +\n  guides(fill = \"none\") +\n  theme_minimal()\n\n\n\n\n\n\n\nAlternatively, you calculate the percentages yourself first.\n\nCodecounts &lt;- mpg %&gt;%\n  count(class) %&gt;%\n  mutate(pct = n / sum(n))\n\nggplot(counts, aes(x = reorder(class, n), y = pct, fill = class)) +\n  geom_col(alpha = .85) +\n  geom_text(\n    mapping = aes(label = percent(pct)),\n    vjust = -0.5,\n    color = \"grey20\",\n    size = 3\n  ) +\n  labs(x = \"class\", y = \"count\") +\n  guides(fill = \"none\") +\n  scale_y_continuous(labels = percent_format(accuracy = 1)) +\n  theme_minimal()\n\n\n\n\n\n\n\nThe code of this latter approach seems to be a lot simpler, so could be recommended on that basis.\n\n2.2.2 Stacked bar plots\nStacked bar plots can be used to add additional information to a bar plot, but they generally are difficult to interpret. It’s difficult to assess the varying sizes of the stacked bar charts. Plotting Likert responses as a stacked bar char may be an exception, as long as it is accompanied by labeled percentages and rotated horizontally. See the Likert chapter for more information.\nUsually the better way to add additional information to a bar plot is to use faceting.",
    "crumbs": [
      "Basic plots",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Bar plots</span>"
    ]
  }
]