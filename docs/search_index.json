[["index.html", "How to Visualize How to Visualize Important About Contributions", " How to Visualize Rethink Priorities 2022-01-26 How to Visualize Important This is a work in progress! At this point I would not even call it an alpha, so please be patient while we finalize this book! About This is a book to organize our knowledge of data visualization and to provide examples, code, templates, and functions that can be used across various Rethink Priorities projects. There are several important goals we’re hoping to achieve with this book: Establish a knowledge base about how to best represent different types of data and relationships Showcase examples of functions from the rethinkpriorities package that relate to data visualization Provide examples of code that can be adjusted and incorporated to suit common data visualization needs Establish different color palettes that can be consistently used within and between Rethink Priorities projects Be inclusive by designing responsive and color-blind friendly graphs If you have feedback, please contact any of the people below or create an issue on the GitHub repository. Contributions Please add yourself to the list below to acknowledge your contributions. Willem Sleegers: willem@rethinkpriorities.org Jamie Elsey: jamie@rethinkpriorities.org David Reinstein: dreinstein@rethinkpriorities.org "],["best-practices.html", "1 Best practices 1.1 ggplot 1.2 Re-usability 1.3 Labeling 1.4 Anonymity", " 1 Best practices 1.1 ggplot Aim to use the ggplot R package for creating plots. ggplot is a powerful visualization package and should enable us to create the kind of plots we want to present. If we all use ggplot, we can write code that can be re-used by each other. It also makes it easy to write custom themes and color palettes that can be re-used, which will produce a consistency within and between projects that people are likely to appreciate. Always save the plot as an object in the environment as well as printing it where it belongs. ‘Piping data into the ggplot’ to make the code more portable and readable. Keep steps separate. 1.2 Re-usability Ideally, we will come up with a set of functions and default options for the key sets of plots we use and like. Otherwise define sets of common options for plots in one place, and repeated ggplot elements together as a list to avoid repetition and clutter and to to allow easy ‘global’ adjustment. However, there are times in which too much automation makes things less flexible and increases mental overhead. We’ll come to good compromises. 1.3 Labeling Use readable but concise labels. Examples of good labels are: “Amount donated” “GWWC” (we can assume people know what GWWC is) Examples of bad labels are: amt_don Coding-wise: Define and reuse lists of labels (or use inherent labeling options where these exist, to exploit existing variable and value labels.) 1.4 Anonymity We should make sure that the real data we plot is anonymous. There are several tricks we can use to assure the anonymity of the data. Plot approximations of the data, rather than actual data itself. This can be done with geoms such as geom_jitter or the position argument. Disable hover information in interactive plots. "],["using-ggplot.html", "2 Using ggplot 2.1 Using geom_point", " 2 Using ggplot 2.1 Using geom_point Multiple different styles of point are available using the ‘shape =’ command, followed by the number of the desired shape. Note that different shapes will/will not allow color and fill, and also that ggplot and ggplotly display some shapes slightly differently. point_styles &lt;- tibble( point_style = seq(0, 25), x = c(rep(seq(0, 9), 2), seq(0, 5)), y = c(rep(0, 10), rep(1, 10), rep(2, 6)), label = c(rep(&quot;0-9&quot;, 10), rep(&quot;10-19&quot;, 10), rep(&quot;20-25&quot;, 6)) ) point_styles &lt;- mutate(point_styles, label = fct_relevel(label, &quot;0-9&quot; , &quot;10-19&quot;, &quot;20-25&quot;) ) p &lt;- ggplot(point_styles, aes(x = x, y = label)) + scale_x_continuous( limits = c(0 , 9), breaks = seq(from = 0, to = 9, by = 1) ) + geom_point( size = 5, shape = point_styles$point_style, color = &quot;Black&quot;, fill = &quot;#7ccbbc&quot; ) + theme_rethink() ggplotly(p) "],["basic-plots.html", "3 Basic plots 3.1 Bar plots 3.2 Scatter plots 3.3 Line plots", " 3 Basic plots 3.1 Bar plots p &lt;- ggplot(mpg, aes(x = class, fill = class)) + geom_bar(alpha = .75) + scale_fill_viridis(discrete = TRUE, option = &quot;mako&quot;, end = .95) + theme_rethink() ggplotly(p, tooltip = &quot;x&quot;) 3.1.1 Stacked bar plots Stacked bar plots can be used to add additional information to a bar plot. head(beaver1, n = 5) ## day time temp activ ## 1 346 840 36.33 0 ## 2 346 850 36.34 0 ## 3 346 900 36.35 0 ## 4 346 910 36.42 0 ## 5 346 920 36.55 0 The following graph is a stacked bar plot. p &lt;- ggplot(mpg, aes(x = class, fill = drv)) + geom_bar(alpha = .75) + scale_fill_viridis(discrete = TRUE, option = &quot;mako&quot;, end = .95) + theme_rethink() ggplotly(p) 3.2 Scatter plots 3.2.1 Simple scatter plot p &lt;- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point(alpha = .85) + theme_rethink() ggplotly(p) 3.2.2 Jittered scatter plot p &lt;- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_jitter(alpha = .85, width = 0.5, height = 0.5) + theme_rethink() ggplotly(p, tooltip = &quot;none&quot;) 3.2.3 Multiple scatter plot p &lt;- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) + geom_point(alpha = .85) + scale_color_viridis(discrete = TRUE, option = &quot;mako&quot;, end = .95) + theme_rethink() ggplotly(p) 3.3 Line plots 3.3.1 Simple line plot p &lt;- ggplot(economics, aes(x = date, y = unemploy)) + geom_line() + theme_rethink() ggplotly(p) 3.3.2 Multiple lines plot p &lt;- ggplot(economics_long, aes(x = date, y = value01, color = variable)) + geom_line() + scale_color_viridis(discrete = TRUE, option = &quot;mako&quot;, end = .95) + theme_rethink() ggplotly(p) "],["likert-plots.html", "4 Likert plots 4.1 Single item plot 4.2 Multiple items plots 4.3 To do", " 4 Likert plots 4.1 Single item plot ggplot(magazines_counts, aes(x = response_num, y = pct, fill = response)) + geom_col(alpha = .8) + scale_y_continuous(labels = percent_format(accuracy = 1)) + geom_text( mapping = aes(label = paste0(round(pct * 100), &quot;%&quot;)), vjust = -0.5, size = 3 ) + labs( x = &quot;Frequency reading magazines&quot;, y = &quot;Percentage of respondents&quot;, fill = &quot;Categories&quot; ) + scale_fill_viridis(discrete = TRUE, option = &quot;mako&quot;, begin = .1, end = .9) + theme_minimal() + guides(fill = guide_legend(nrow = 2)) + theme(legend.position = &quot;bottom&quot;) 4.2 Multiple items plots ggplot(counts, aes( x = item, y = pct, fill = reorder(response, desc(response)) ) ) + geom_col(alpha = .8) + coord_flip() + geom_text( mapping = aes(label = paste0(round(pct * 100), &quot;%&quot;)), position = position_stack(vjust = 0.5), size = 3 ) + scale_fill_viridis( discrete = TRUE, option = &quot;mako&quot;, direction = -1, begin = .1, end = .9 ) + scale_y_continuous(labels = percent_format(accuracy = 1)) + labs( x = &quot;&quot;, y = &quot;&quot;, color = &quot;Rating&quot;, fill = &quot;Rating&quot; ) + theme_minimal() + guides(fill = guide_legend(nrow = 2)) + theme(legend.position = &quot;bottom&quot;) # Calculate halves of the neutral category counts_split &lt;- counts %&gt;% filter(response_num == 3) %&gt;% mutate(pct = pct / 2) # Replace old neutral-category new_counts &lt;- filter(counts, response_num != 3) new_counts &lt;- full_join(new_counts, counts_split) %&gt;% arrange(item, response_num) # Separate the data frames new_counts1 &lt;- filter(new_counts, response_num %in% 1:3) new_counts2 &lt;- filter(new_counts, response_num %in% 3:5) # Create a colors vector colors &lt;- mako(n = 5, begin = .1, end = .9) names(colors) &lt;- levels(counts$response) # Plot p &lt;- ggplot() + geom_col( data = new_counts1, mapping = aes(x = item, y = -pct, fill = response), alpha = .8 ) + geom_col( data = new_counts2, mapping = aes(x = item, y = pct, fill = response), position = position_stack(reverse = TRUE), alpha = .8 ) + coord_flip() + scale_y_continuous(labels = percent_format(accuracy = 1)) + scale_fill_manual(values = colors) + labs(x = &quot;&quot;, y = &quot;&quot;, fill = &quot;Category:&quot;) + theme_minimal() + guides(fill = guide_legend(nrow = 2)) + theme(legend.position = &quot;bottom&quot;) p # Create labels labels &lt;- counts %&gt;% group_by(item) %&gt;% mutate( temp = case_when( response_num == 3 ~ pct / 2, response_num &lt; 4 ~ pct, TRUE ~ 0), bottom_half = sum(temp), pos = cumsum(pct) - (pct / 2) - bottom_half ) p + geom_text( data = labels, mapping = aes( x = item, y = pos, label = paste0(round(pct * 100), &quot;%&quot;) ), size = 3 ) 4.3 To do The combination of stacked bar charts and overlayed error/CI bars for some ‘middle split’ seems informative: See here for an example of a summary chart. "],["forest-plots.html", "5 Forest plots", " 5 Forest plots for CI’s/ranges1 by group2 #grouped_forest_plot is defined in plotting_functions.R group_fp_do &lt;- function(df, groups=model_name, xlims=c(NA,NA), vl=1){ df %&gt;% grouped_forest_plot(., groups = {{groups}}, vline = {{vl}}) + coord_cartesian(xlim = {{xlims}}) + scale_colour_discrete(name = &quot;&quot;, labels = function(x) str_wrap(x, width = 15)) + theme_bw() + theme(legend.position = &quot;bottom&quot;) + guides(fill=guide_legend(nrow=2, byrow=TRUE)) } …of values or ‘effects’↩︎ … or by model or specification↩︎ "],["treemaps.html", "6 Treemaps", " 6 Treemaps # Load packages library(treemapify) p &lt;- ggplot(G20, aes(area = gdp_mil_usd, fill = hdi)) + geom_treemap() p p &lt;- ggplot(G20, aes(area = gdp_mil_usd, fill = hdi, label = country)) + geom_treemap() + geom_treemap_text( fontface = &quot;italic&quot;, colour = &quot;white&quot;, place = &quot;centre&quot;, grow = TRUE ) p "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
